---
title: "The Design Philosophy of Great Tables and What We're Really Trying to Solve"
html-table-processing: none
author: Rich Iannone
date: 2024-03-25
freeze: true
jupyter: python3
---

We've spent a lot of time thinking about tables. Tables---like plots---are crucial as a last step toward presenting information. There is surprising sophistication and nuance in designing effective tables. Over the past 5,000 years, they've evolved from simple grids to highly structured displays of data. Although we postulate that the mid-1900s served as a high point, the popularization and wider accessibility of computing seemingly brought us back to the simple, ancient times.

Okay, it's not all *that bad* but the workers of data are today confronted with a dilemma: copy your data into a tool like Excel for making the table, or, display an unpolished table. Through exploring the qualities that make tables shine, the backstory of tables as a display of data, and the issues faced today, it's clear how we can solve the **great table dilemma** with **Great Tables**.

![](./computer_tables.png)

<p style="font-size: 12px;">Tables made with computers (left to right): (1) a DataFrame printed at the console, (2) an Excel table, and (3) a **Great Tables** table.</p>

### What is a table, really?

Before getting to what makes tables shine we have to define what a table is. This is surprisingly hard! But I believe it can be boiled down to two basic rules:

- the data is represented as columns and rows
- the data is primarily text

Let's look at an example of a simple table with actual data to tie theory to practice.

```{python}
# | echo: false
import polars as pl
from great_tables import GT, md

simple_table = pl.DataFrame(
    {
        "Name": [
            "Dustin B. Roach",
            "Iwona Adamczyk",
            "Geneviève Massé",
            "João Souza Lima",
            "Maddison McCabe",
        ],
        "Address": [
            "1183 Columbia Road",
            "ul. Zabłudowska 133",
            "1415 rue Principale",
            "Rua Cosmorama, 538",
            "149 Raymond Street",
        ],
        "City": ["Holly Oak, DE", "Warszawa", "Amos, QC", "São Paulo-SP", "Strathern"],
        "Postcode": ["19809", "04-788", "J9T 1E4", "04648-080", "Invercargill 9812"],
        "DOB": ["1970-09-16", "1976-01-03", "1967-12-08", "2001-04-21", "1982-03-05"],
        "Height": ["5' 9\"", "5' 5\"", "5' 3\"", "6' 2\"", "5' 8\""],
        "Weight": [202.5, 123.7, 136.3, 231.0, 146.1],
    }
)

GT(simple_table)
```

<p style="font-size: 12px;">A table of named individuals along with a select set of characteristics.</p>

This table arranges records for personal characteristic in columns and rows. Each person has a row, and each characteristic in a column. The characteristics use different types of data, like dates, numbers, and text. This arrangement makes it easy to look up individual values or make comparisons across the different rows or columns.

In the table above there are horizontal lines separating the rows. While not strictly required for a table these act as visual reinforcements that separate the individual rows.

The order of the columns matters, and that we start with the `Name` column here is no accident. If you were to have that column as the last column (i.e., furthest to the right), it would be slightly more confusing for the reader since the basis for the record doesn't come first in a conventional left-to-right reading. Moving on to considering the columns of this table, note that we don't have to infer what type of data is contained in each from the data itself, a row at the top is dedicated for labeling the contents within the columns.

We'll go into some detail later about how **Great Tables** provides affordances for structuring information for better legibility and how the package can be used to adorn the table with other structural elements. For now, our conception of a table can be summarized in this schematic.

![](./a_simple_table.png)

<p style="font-size: 12px;">A simple table has: (1) cells containing data, (2) an arrangement of columns and rows, and (3) column labels to describe the type data in each column.</p>

### The early history of tables

Tables emerged from square grids. When grids are made like this, you invariably generate containers that may hold some sort of information. The earliest known examples of grids go very far back in human history. Twenty-five thousand year old representations of the grid are found on the walls of the Lascaux and Niaux caves in France[^1].

![](./cave_grids.png)

<p style="font-size: 12px;">Reproductions of early grids found on cave walls.</p>

In the second century BC, the Greek astronomer Hipparchus used latitude and longitude to locate celestial and terrestrial positions[^2]. At around AD 150, Ptolmey published *Geographia*, which contains 25 geographical maps accompanied by methodologies for their construction using grids[^3]. The Romans employed a grid system called *centuriation*, which can be described as land measurement (using surveyors' instruments) to realize the formation of square grids using roads, canals, or agricultural plots[^4].

When agriculture became more widespread (ca. 10,000 years ago), there was the need to document and manage economic transactions to do with farming, livestock, and the division of labor. In the fourth millennium BC, Mesopotamian cities that traded with far way kingdoms needed to keep such records. Clay tablets recovered from the ancient Sumerian city of Uruk show early yet sophisticated tables. Here is a drawing of one of the recovered tablets, which contains an accounting of deliveries of barley and malt from two individuals for the production of beer[^5].

![](./uruk_tablet_with_annotations.png)

<p style="font-size: 12px;">Drawing of clay tablet from Sumerian city of Uruk, circa 3200-3000 BC. Uruk III Tablet (MSVO 3, 51, Louvre Museum, Paris, France). Annotated with the meanings of the columns, rows, and cells.</p>

Note that the recovered tablet is meant to be read from right to left. Inside each box is an ideogram (a symbol that represented a word or idea) and a numerical value representing a quantity. 

Its structure is where things get super interesting:

* Rows: there are roughly two rows, each corresponding to an individual.
* Columns: the first two columns from the right contain counts of malt (rightmost column) and barley (second rightmost column).
* Subtotals: the third column from the right sums barley and malt within each individual, and the left-most column displays the grand total.

As a bonus, the table has a footer, since the bottom row contains the name of the official in charge.

Zooming ahead about a thousand years, you start to see more systematically structured tables. Here's a photo of a cuneiform tablet that was originally from Mesopotamia (from the Temple of Enlil at Nippur, ca. 1850 BC)[^6], containing sources of revenue and monthly disbursements for 50 temple personnel. 

![](./nippur_cuneiform_tablet.png)

<p style="font-size: 12px;">Cuneiform tablet, temple of Enlil at Nippur, (CBS 3323, University of Pennsylvania).</p>

You can see right away that there is a more regular grid and, if you probe deeper, there are more similarities than differerences with the tables of today. While difficult to pick them out, the following table elements are present[^7]:

- column headings (month names) and row titles (names/professions of individuals).
- cells with no information (look at the blank or smooth cells along rows)
- numerical values in the cells
- subtotals for each individual every six months
- grand totals
- annotations with explanatory notes

Later on, tables were less inscribed on clay and more on wax tablets, papyrus, and paper. The media have changed, writing technologies have changed, and the design and presentation of tables also went through changes.

### Midcentury modern tables

Perhaps the best period for tables was around the middle of the 20th century. Technologies for table (and surrounding document) preparation included the offset printer, the typewriter, and varitype[^8] (my favorite). The technologies were sufficiently advanced as to allow the precise typesetting of table elements. While of course constrained by the limited space available on pages, tabular design at this point had many workable solutions for fitting tables into single pages or dispersing the tabular content across multiple pages. The combination of advanced printing technology with advanced knowledge of tabular design resulted in *beautiful tables*.

There's no greater embodiment of that pairing of technology and design than the [*Manual of Tabular Presentation*](https://www2.census.gov/library/publications/1949/general/tabular-presentation.pdf)[^9], written and published by the United States Bureau of the Census. It is truly a remarkable work which goes into great detail on how the department imagines the ideal designs of information-rich tables. The work articulates the different parts of a table (and each part is given a descriptive name), sparing no detail when describing those different table parts in rigorous detail. Throughout its hundreds of pages, the authors make strong recommendations on what to do (and what *not* to do) for many tabulation scenarios. When poring over the tables visually depicted in the book, you can't help but see that tables can both look really good *and* contain a density of information. The promise and the result is a balance of form and function.

We at **Great Tables** borrow liberally from this work because many of its tabular design principles are just as good now as they were back then (and we'll talk about what we took from that work in the next section). We'll end this brief section with a visual montage of snippets from the *Census Manual*, which provides a glimpse of the sound advice on offer.

![](./snippets_from_manual_tablular_presentation.png)

<p style="font-size: 12px;">Little nuggets of wisdom from the *Census Manual*. This may very well be the ultimate book on tabular design.</p>

### The late history of tables

With computing technologies becoming more accessible by the 1970s and 1980s, people were able to generate tables in both electronic and print form. The democratization of computational tables arguably began with VisiCalc in 1979, a massive success that initiated the computing category of spreadsheeting software. There's an undeniable advantage to having data analyzed and transformed in computing environments, but, this comes at a cost. Like, do these tables look any good? (They do not.)

![](./visicalc.png)

<p style="font-size: 12px;">This is a table in VisiCalc (earliest example of a table in a spreadsheet application). It's pretty crude compared to the tables in print but the advantage here is that you can calculate values quickly.</p>

Over time, and this only took 10-15 years, tables-within-spreadsheets got a little easier on the eyes. By the early 1990s, Excel could paint borders on your tables, better typographical support was available, and the formatting of values was fully-featured (though, [wonky](https://www.cnet.com/tech/computing/prevent-excel-from-reformatting-two-numbers-to-a-date-and-month/)). Great! Problem solved, right? Not really.

While Excel tables from the last three decades looked much better than 1980s-spreadsheet-borne tables, they could never hold a candle to the what was shown in the *Census Manual* (no matter how much of an Excel expert you became). Further to this, data analysis started to became a thing accomplished outside of Excel. Think Python and Jupyter notebooks. We now have a bag of problematic scenarios:

- you can use Python (or some other language) to analyze data and generate some tables that won't look too good
- you can do everything in Excel and make semi-good tables (but you don't get to use the power of Py)
- you can use Python for data analysis/summarization and bring it over to Excel for the table finishing move

All of these are suboptimal solutions. We propose that it is far better to do everything in Python: the data ingestion, the data analysis, and the data visualization. The visualization step is what's done for plots and other types of graphics composed from data, it shouldn't be any different when it comes to generating summary tables.

### Approach to tables taken by **Great Tables**

With **Great Tables** anyone can make wonderful-looking tables in Python. Our philosophy centers around the definition and compositional possibilities of working with a cohesive set of table components. We firmly believe that the methods offered in the package enable people to construct a wide variety of useful tables that work across many disciplines. It provides you with the latitude to mix and match table components as needed.

Some of the options include:

* add a header and a footer for explanatory text
* a stub for identification of the rows and any hierarchical arrangements therein
* place spanner labels over top of the column labels

Here is a schematic that outlines our terminology and depicts how the different table components are related to each other:

![](./composition_of_a_table_in_GT.png)

<p style="font-size: 12px;">A schematic with the complete set of table components that can be utilized in **Great Tables**.</p>

If you followed our advice to look at the *Census Manual* (or just glanced at our excerpts-based graphic), you might have noticed that the term **Stub** is also in our table schematic. We thought it was too good a name to *not* borrow. You won't find too many mentions of that term elsewhere; others in the table business will use it sparingly, if at all. But that bit of terminology is perfect for the function that component has: to store information that identifies and explains the rows (as well as labels that deal with groupings of rows). The **Stub Head**, while small, is an important addendum. It functions to either label the elements in the stub (below), the elements in the column labels (across), or both. It can even not be present at all.

The table **Heading** is all important to us, and far too many software applications that allow for summary table creation make it difficult or impossible to include a heading. The **Footer** is equally important but is unfortunately often neglected. It provides a place for table notes and will only be present in **Great Tables** if table notes do exist.

The **Spanner Labels** are pieces of text that span across **Column Labels**, allowing for some grouping of columns where it makes sense. This is important for the readability of tables, especially wider tables having many columns.

Aside from a table's stuctural considerations, we also believe that the data values contained within the cells often require formatting before presentation, since the representation for computing isn't always optimal for readers of a table. To that end, we provide a large collection of formatting methods that are purpose-built for each type of formatting operation. While focused on simplicity they are also powerful, giving you the ability to customize values to your liking. We want users all over the world to be able to use **Great Tables** successfully so we built in locale-based formatting options, based on the latest guidance from the [Unicode CLDR](https://cldr.unicode.org).

The majority of open-source software packages that deal with tables seem to be more focused on the display of simple yet large tables. We wanted to be different in this regard and instead focus on the task of generating summary tables. Those open-source table projects typically produce tables with pagination and other such controls to navigate and filter hundreds, thousands, maybe even more records. And that is great for those situations where you'd want to expose a database of records for a user to explore. But we wanted to go the other way and help the type of user that wanted to present smaller, summarized data. This is typically what you see in journal articles, in books, and in periodicals like [*The Economist*](https://www.economist.com/economic-and-financial-indicators/2024/03/14/economic-data-commodities-and-markets). We long held that there was an unaddressed need for users to create highly customized tables that could serve as interesting visualizations.

Now that you have some more insight about where we were coming from, let's take the table that contains the names and addresses of people and use the **Great Tables** API to make that table really shine. We're going for greater structural organization of the rows and columns to further enhance legibility. We'll add a heading so that readers generally know what's contained within the table body. Remember when we mentioned that the first column should serve to identify the rows? To make that key information more prominent, a stub column will be generated for that purpose. To put the columns into sensible groupings, we'll make use of column spanners. Finally, we'll perform some light styling to enliven the overall display. Here's the code and the resulting table:

```{python}
from great_tables import GT, md, system_fonts

(
    GT(simple_table, rowname_col="Name")
    .tab_spanner(label="Location", columns=["Address", "City", "Postcode"])
    .tab_spanner(label="Personal Characteristics", columns=["DOB", "Height", "Weight"])
    .tab_options(table_font_size="12px")
    .tab_header(title="Names, Addresses, and Characteristics of Remote Correspondents")
    .tab_stubhead(label=md("*Name*"))
    .tab_source_note(source_note=md("**Data last updated**: December 18, 2022."))
    .fmt_date(columns="DOB", date_style="m_day_year")
    .fmt_integer(columns="Weight", pattern="{x} lbs")
    .opt_stylize()
    .opt_align_table_header(align="left")
    .opt_vertical_padding(scale=0.75)
    .tab_options(
        table_font_names=system_fonts(name="rounded-sans"),
        table_font_size="14px"
    )
)
```

<p style="font-size: 12px;">A table of named individuals redone, **Great Tables** style!</p>

Generally we add table components with the `tab_*()` methods, format the data with the `fmt_*()` methods, and customize the look of the table with some `opt_*()` methods (and `tab_options()`). Based on your feeling of what makes a summary table complete and fit for publication, you have the freedom to use as little or as much of the collection of API methods to iteratively modify the table to your liking. As we continue to develop **Great Tables** we will: (1) keep the semantics of the API consistent and the individual methods easy to understand and use, and (2) add more API methods without breaking existing functionality.

### How do we choose between tables and plots?

When you're deep into reporting work, there's often that decision point concerning whether the data should be presented as a plot or a table. There's a few things to consider but a key differentiator of tables is that they make it really easy to look up individual values. If you or other people intend to look up particular values, it's hard to beat a table for that. However, if the information is to be used to examine a set of quantitative values as a whole, or to discern patterns, you should instead make a plot.

Tables make it easy to compare pairs of related values. Here's a table that allows for the simple comparison of the populations of countries for a given year:

```{python}
#| code-fold: true
#| code-summary: "Show the code"
from great_tables import GT
from great_tables.data import countrypops
import polars as pl
import polars.selectors as cs

wide_pops = (
    pl.from_pandas(countrypops)
    .filter(
        pl.col("country_code_2").is_in(["FR", "DE", "IT", "GB"])
        & pl.col("year").is_in([1980, 1990, 2000, 2010, 2020])
    )
    .pivot(index="country_name", columns="year", values="population")
    .sort("2020", descending=True)
)

(
    GT(wide_pops, rowname_col="country_name")
    .tab_header(
        title="Populations of the Big Four Countries in Western Europe",
        subtitle="Population values are from 1980, 1990, 2000, 2010, and 2020.",
    )
    .tab_spanner(label="Total Population", columns=cs.all())
    .fmt_integer(columns=["1980", "1990", "2000", "2010", "2020"])
    .tab_stubhead(label="Country")
)
```

<p style="font-size: 12px;">A example of a table where the use of a table is clear: getting precise values across common categories for multiple entities.</p>

From this, it's fairly easy to get the individual population values of Germany and France from the year 2000. If we had to do the same task using a plot of the data, it would require reencoding the data point positions to numerical values. Owing to the text-based encoding of values in tables, we can get a level of precision that cannot be matched by plots.

Here's another strength of tables that might help when making the choice: tables can include multiple sets of quantitative values that are expressed in different units of measure. So if you wanted to present a set of data with different units, you couldn't easily do it in one plot since plots typically have a single quantitative scale with a single unit of measure.

Finally, a good reason to choose a table over a plot is that tables allow for the combination of summary and detail information in a single table. This is well understood in tables and is commonly seen. As a simple example, we could extend the country population table above so it contains a row of total population values (the summary) that goes below the rows containing populations for each country (the details).

It's good to know when a table ought to be used and when a plot is better. It's hoped that the reasons outlined above serve to make the decision that much easier.

### In conclusion

This concludes our thoughts about how tables could ideally undergo table structuring, cell formatting, and styling for presentation. Tables have come a long way and we've already learned a lot from our continued research in tabular design. We hope to make the **Great Tables** package useful for your generation of summary tables. Given there's ample room for innovation in this area, we'll keep plugging away at doing that work to improve the API. We measure success by the quality of the tables the package is able to produce and we always keep that goal top of mind.

We're very excited about where things are going with **Great Tables** and we geniunely appreciate community feedback. If ever you want to talk tables with us, you're always welcome to jump into our [Discord Server](https://discord.com/invite/Ux7nrcXHVV) and drop us a line!

[^1]: Taylor, B. (2021). Lunar timekeeping in Upper Paleolithic Cave Art. *PRAEHISTORIA New Series*, *3*(13), 215–232.

[^2]: Duke, D. W. (2002). Hipparchus' Coordinate System. *Archive for History of Exact Sciences*, *56*(5), 427-433.

[^3]: <https://en.wikipedia.org/wiki/Geography_(Ptolemy)>

[^4]: Palet, J. M. and Orengo, H. A., The Roman Centuriated Landscape: Conception, Genesis, and Development as Inferred from the Ager Tarraconensis Case. *American Journal of Archaeology*, *115*(3), 383-402.

[^5]: Marchese, F. T., Exploring the Origins of Tables for Information Visualization. *Proceedings of the 2011 15th International Conference on Information Visualisation*, 13-15 July 2011, doi:10.1109/IV.2011.36.

[^6]: M. W. Green, The construction and implementation of the cuneiform writing system, *Visible Writing*, *15*, 1981, 345-72.

[^7]: Robson, E., "Tables and tabular formatting in Sumer, Babylonia, and Assyria, 2500-50 BCE" in M. Campbell-Kelly, M. Croarken, R.G. Flood, and E. Robson (eds.), *The History of Mathematical Tables from Sumer to Spreadsheets*. Oxford: Oxford University Press, 2003, 18–47.

[^8]: <https://site.xavier.edu/polt/typewriters/varityper.html>

[^9]: Manual of Tabular Presentation: An Outline of Theory and Practice in the Presentation of Statistical Data in Tables for Publication. United States. Bureau of the Census. U.S. Government Printing Office, 1949. Resource available at: <https://www2.census.gov/library/publications/1949/general/tabular-presentation.pdf>.
