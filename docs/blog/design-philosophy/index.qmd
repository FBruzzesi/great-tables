---
title: "The Underlying Design Philosophy in Great Tables"
html-table-processing: none
author: Rich Iannone
date: 2024-03-25
freeze: true
jupyter: python3
---

When thinking about tables and the qualities that make tables both informative and aesthetically please, it's all to easy to lose sight of the fundamentals. We ought to understand what makes a table a table, what characteristics make tables shine, and when to choose tables over other displays of information like plots. Throughout this post I'll try to address all of this and I'll also delve into the little-discussed history of tables to see where this all came from. Once we're back to the here and now, there will be some elaboration on what **Great Tables** brings to the table. The package has a clear vision and design philosophy and I hope to articulate all of that here.

### What is a table, really?

Tables are surpisingly hard to define! I think it's that we take them for granted and we don't often question those tables that are presented to us in terms of their fundamental characteristics. Still, it is useful to understand what makes a table a table. I believe it can be boiled down to two basic rules:

- data is placed in a grid comprising columns and rows
- the data is primarily in the form of text, and the text can include both numbers and words

This set of requirements seems like the bare minimum for a table to be construed as a table. If we have one without the other, then what results is something probably not recognizable as a table. Here's a mini movie that demonstrates the same set of information before and after its incorporation into a table structure.

![](./schematic_of_a_table.gif)

I know that we often see and use horizontal and/or vertical grid lines within tables, but, those act more as visual reinforcements that outline the columns and rows. So, they're not strictly required for a table to be one. And if this reasoning holds it is thus the arrangement of the data values that matters most here (and not the presence of lines, which serves to visualize the underlying grid).

Now that we've reviewed the basic structure of the table having columns and rows, what goes in each? The most effective tables will have separate entries or records arranged as the horizontal rows; and the characteristics or attribute values should run down columns. The intersecting piece of text (sometimes called a cell, but not always) is a data attribute tied to a specific record or entry. This is intuitive because we're used to seeing tables (they've been around for thousands of years!) but we don't often rigorously think about how this all holds together. Let's look at an example of a simple table to tie theory to practice.

```{python}
# | echo: false
import polars as pl
from great_tables import GT, md

simple_table = pl.DataFrame(
    {
        "Name": [
            "Dustin B. Roach",
            "Iwona Adamczyk",
            "Geneviève Massé",
            "João Souza Lima",
            "Maddison McCabe",
        ],
        "Address": [
            "1183 Columbia Road",
            "ul. Zabłudowska 133",
            "1415 rue Principale",
            "Rua Cosmorama, 538",
            "149 Raymond Street",
        ],
        "City": ["Holly Oak, DE", "Warszawa", "Amos, QC", "São Paulo-SP", "Strathern"],
        "Postcode": ["19809", "04-788", "J9T 1E4", "04648-080", "Invercargill 9812"],
        "DOB": ["1970-09-16", "1976-01-03", "1967-12-08", "2001-04-21", "1982-03-05"],
        "Height": ["5' 9\"", "5' 5\"", "5' 3\"", "6' 2\"", "5' 8\""],
        "Weight": [202.5, 123.7, 136.3, 231.0, 146.1],
    }
)

GT(simple_table)
```

Each row in the table corresponds to a single person. Starting from the left we see people's names and so we can surmise that these are records that pertain to individuals. Each column provides some attribute of the person, which includes the full name, address details, date of birth, and some physical characteristics. That we start with the `Name` column here is no accident. If you were to have that column as the last column (i.e., furthest to the right), it would be slightly more confusing for the reader since the basis for the record doesn't come first in a conventional left-to-right reading. Moving on to considering the columns of this table, note that we don't have to infer what type of data is contained in each from the data itself, a row at the top is dedicated for labeling the contents within the columns.

We'll go into some detail later about how **Great Tables** provides affordances for structuring information for better legibility and how the package can be used to adorn the table with other structural elements. For now, let's go (way) back in time to learn how tables evolved.

### The early history of tables

Another aspect of tables that has the power to surprise is just how long they've been around. The earliest known examples go very far back in human history. I did mention the word *grid* a few times and there is much evidence for grids predating tables. So really, the history of graphical representation and of data analysis begins with the grid. Could we break down the idea of a grid? Sure, it's a metric by which we establish distance and direction of any position relative to a reference point, line, or plane. Some examples include geographic mapping with latitiude and longitude measures, and, the regular arrangement of city blocks through the arrangement of east-west and north-south streets. The latter is commonly known as a square grid and this is the sense of a grid we'll use going forward.

Twenty-five thousand year old representations of the grid are found on the walls of the Lascaux and Niaux caves in France[^1]. In the second century BCE, the highly regarded Greek astronomer Hipparchus used latitude and longitude to locate celestial and terrestrial positions[^2]. At around AD 150, Ptolmey published *Geographia*, which contains 25 geographical maps accompanied by methodologies for their construction using grids[^3]. The Romans employed a grid system called centuration, which can be described as land measurement (using surveyors' instruments) to realize the formation of square grids using roads, canals, or agricultural plots[^4].

When grids are made, you invariably generate containers; these are locations that may hold some sort of information. When agriculture because more widespread (ca. 10,000 years ago), there was the need to document and manage economic transactions to do with to farming, livestock, and the division of labor. In the fourth millennium BCE, Mesopotamian cities that traded with geographically distant kingdoms certainly needed to keep such records. We have evidence for these accounting practices by way of clay tablets recovered from the ancient Sumerian city of Uruk. Here is drawing of one of the recovered tablets, which contains an accounting of deliveries of barley and malt from two individuals for the production of beer.

![](./uruk_iii_tablet.png)

The inscribed grid in the ca. 3200-3000 BCE tablet creates boxes and each one of them represented an accounting unit. Inside each box was an ideogram (a symbol that represented a word or idea) and a numerical value representing a quantity. Now here is where it gets super interesting: each row corresponds to an individual, two columns contain entries for malt and barley; subtotals are given in the third column; and the left-most box displays the grand total. This has all the elements of a summary table! In addition, no formal language was used to explain the relationships within the tablet/table. Instead, the grid structure itself provided all that. As a bonus, the table has a footer as the bottom row contains the name of the official in charge. This is a visionary table we've got here.

Zooming ahead about a thousand years, you start to see more systematically structured tables. Here's a photo of a cuneiform tablet that was originally from Mesopotamia (from the Temple of Enlil at Nippur, ca. 1850 BCE).

![](./nippur_cuneiform_tablet.png)

You can see right away that there is a more regular grid and, if you probe deeper, there are more similarities than differerences with the tables of today. This contains sources of revenue and monthly disbursements for nearly 50 temple personnel. While it can be difficult to see it, you should take it on good authority[^5] that the following table elements are present:

- column headings (month names) and row titles (names/professions of individuals).
- cells with no information (look at the blank or smooth cells along rows)
- numerical values in the cells
- subtotals for each individual are every six months
- grand totals adjacent to row labels
- annotations with explanatory notes under those columns containing totals

Later on, tables were less inscribed on clay and more on wax tablets, papyrus, paper, and eventually tables became computerized. What a trip it has been for tables!

### Midcentury tables

There's a prehistory to modern, computerized tables and perhaps the best period for tables was around the middle of the 20th century. Technologies for table (and surrounding document) preparation included the offset printer, the typewriter, and varitype[^6] (my favorite). While constrained by the limited space available on pages, tabular design at this point had many solutions for either fitting tables onto single, variously-sized pages or distributing the table content across multiple pages. Ever heard of 'Multipage Narrow, Continuous Boxhead' tables? How about the 'Broad Table'? The 'Parallel Table'? I'm sure you've seen these types of tables but just didn't know the names ascribed to them.

To remedy this lack of knowledge on table typologies, the United States Bureau of the Census published their *Manual of Tabular Presentation*[^7]. While intended as an operating tool (what might be called a style guide nowadays) one can now plumb the considerable depths of this monograph for its excellent recommendations on tabular design. It spares no detail on how to classify the different parts of a table, it provides many examples in visual form, and it provides hundreds of recommendations on what to do (and what *not* to do) for many tabulation scenarios. We, **Great Tables**, borrow liberally from this work because many of its tabular design principles are just as good now as they were back then (and we'll talk about what we took from that work in the next section). If you're interested in really getting into the nitty gritty of tabular presentation then [get the freely-available PDF file](https://www2.census.gov/library/publications/1949/general/tabular-presentation.pdf) and prepare to be delighted. We'll end this brief section with a visual montage of snippets from the *Census Manual*, which is laden with good advice.

![](./snippets_from_manual_tablular_presentation.png)

### Approach to tables taken by **Great Tables**

As mentioned in the previous section, the *Census Manual* had a profound impact on the design of the **Great Tables** API. We decided to borrow some of the naming conventions for the table components since not having names for such things would have made explications in the documentation quite awkward. In the *Census Manual* spirit of making things visual, we often try to visually present how the table components fit together with a unifying graphic. Here's one example of that:

![](./composition_of_a_table_in_GT.png)

If you followed our advice to look at the *Census Manual* (or just glanced at our excerpts-based graphic), you might have noticed that the term 'Stub' is also in our table schematic. We thought it was too good a name to *not* borrow. You won't find too many mentions of that term elsewhere; others in the table business will use it sparingly, if at all. But that bit of terminology is perfect for the function that component has: to store information that identifies and explains the rows (as well as labels that deal with groupings of rows). The table 'Heading' is all important to us, and far too many software applications that allow for summary table creation make it difficult or impossible to include a heading.

Aside from similarities in naming conventions, we wanted to be different and really focus on the art of generating summary tables. Many table APIs (built with all sorts of programming languages) almost exclusively concern themselves with the simple display of records (with pagination and other such controls to navigate and filter hundreds, thousands, maybe even more records). And that is great for situations where you want to expose a database of records for a user to explore. But we wanted to go the other way and help the user that wanted to exclusively focus on smaller data, sometimes called summarized or summary data. This is typically what you see in journal articles, in books, and in [*The Economist*](https://www.economist.com/economic-and-financial-indicators/2024/03/14/economic-data-commodities-and-markets). There's that unaddressed need to create a highly customized table-as-interesting-visualization that needed to be filled.

Let's take the table that contains the names and addresses of people and use the **Great Tables** API to make that table really shine. We're going for structural organization of the rows and columns to enhance legibility. We'll add a heading so that readers generally know what's contained within the table body. Remember we mentioned that the first column should serve to identify the rows? To make that key information prominent, a stub will be generated for that purpose. To put the columns into sensible groupings, we'll make use of column spanners. Here's the code and the resulting table:

```{python}
from great_tables import GT, md, system_fonts

(
    GT(simple_table, rowname_col="Name")
    .tab_spanner(label="Location", columns=["Address", "City", "Postcode"])
    .tab_spanner(label="Personal Characteristics", columns=["DOB", "Height", "Weight"])
    .tab_options(table_font_size="12px")
    .tab_header(title="Names, Addresses, and Characteristics of Remote Correspondents")
    .tab_stubhead(label=md("*Name*"))
    .tab_source_note(source_note=md("**Data last updated**: December 18, 2022."))
    .fmt_date(columns="DOB", date_style="m_day_year")
    .fmt_integer(columns="Weight", pattern="{x} lbs")
    .opt_stylize()
    .opt_align_table_header(align="left")
    .opt_vertical_padding(scale=0.75)
    .tab_options(
        table_font_names=system_fonts(name="rounded-sans"),
        table_font_size="14px"
    )
)
```

Generally we add table components with the `tab_*()` methods, format the data with the `fmt_*()` methods, and customize the look of the table with some `opt_*()` methods (and `tab_options()`). Based on your feeling of what makes a summary table complete, you have the freedom to use as little or as much of the available API methods to iteratively modify the table to your liking. We try to keep the semantics of the API consistent and the individual method easy to understand and use.

### How do we choose between tables and plots?

When you're deep into reporting work, there's often that decision point concerning whether the data should be presented as a plot or a table. There's a few things to consider but a key differentiator of tables is that they make it really easy to look up individual values. If you or other people intend to look up particular values, it's hard to beat a table for that. However, if the information is to be used to examine a set of quantitative values as a whole, or to discern patterns, your should instead make a plot.

Tables make it easy to compare pairs of related values. Here's a table that allows for the simple comparison of the populations of countries for a given year:

```{python}
#| code-fold: true
#| code-summary: "Show the code"
from great_tables import GT
from great_tables.data import countrypops
import polars as pl
import polars.selectors as cs

wide_pops = (
    pl.from_pandas(countrypops)
    .filter(
        pl.col("country_code_2").is_in(["FR", "DE", "IT", "GB"])
        & pl.col("year").is_in([1980, 1990, 2000, 2010, 2020])
    )
    .pivot(index="country_name", columns="year", values="population")
    .sort("2020", descending=True)
)

(
    GT(wide_pops, rowname_col="country_name")
    .tab_header(
        title="Populations of the Big Four Countries in Western Europe",
        subtitle="Population values are from 1980, 1990, 2000, 2010, and 2020.",
    )
    .tab_spanner(label="Total Population", columns=cs.all())
    .fmt_integer(columns=["1980", "1990", "2000", "2010", "2020"])
    .tab_stubhead(label="Country")
)
```

From this, it's fairly easy to get the individual population values of Germany and France from the year 2000. If we had to do the same task using a plot of the data, it would require reencoding the data point positions to numerical values. Owing to the text-based encoding of values in tables, we can get a level of precision that cannot be matched by plots.

Here's another strength of tables that might help when making the choice: tables can include multiple sets of quantitative values that are expressed in different units of measure. So if you wanted to present a set of data with different units, you couldn't easily do it in one plot since plots typically have a single quantitative scale with a single unit of measure.

Finally, a good reason to choose a table over a plot is that tables allow for the combination of summary and detail information in a single table. This is well understood in tables and is commonly seen. As a simple example, we could extend the country population table above so it contains a row of total population values (the summary) that goes below the rows containing populations for each country (the details).

It's good to know when a table ought to be used and when a plot is better. It's hoped that the reasons outlined above serve to make the decision that much easier.

### In conclusion

This concludes our thoughts about how tables could ideally undergo table structuring, cell formatting, and styling for presentation. Tables have come a long way and we've already learned a lot from our continued research in tabular design. We hope to make the **Great Tables** package useful for your generation of summary tables. Given there's ample room for innovation in this area, we'll keep plugging away at doing that work to improve the API. We measure success by the quality of the tables the package is able to produce and we always keep that goal top of mind.

We're very excited about where things are going with **Great Tables** and we geniunely appreciate community feedback. If ever you want to talk tables with us, you're always welcome to jump into our [Discord Server](https://discord.com/invite/Ux7nrcXHVV) and drop us a line!

[^1]: Taylor, B. (2021). Lunar timekeeping in Upper Paleolithic Cave Art. *PRAEHISTORIA New Series*, *3*(13), 215–232.

[^2]: Duke, D. W. (2002). Hipparchus' Coordinate System. *Archive for History of Exact Sciences*, *56*(5), 427-433.

[^3]: <https://en.wikipedia.org/wiki/Geography_(Ptolemy)>

[^4]: Palet, J. M. and Orengo, H. A., The Roman Centuriated Landscape: Conception, Genesis, and Development as Inferred from the Ager Tarraconensis Case. *American Journal of Archaeology*, *115*(3), 383-402.

[^5]: Robson, E., "Tables and tabular formatting in Sumer, Babylonia, and Assyria, 2500-50 BCE" in M. Campbell-Kelly, M. Croarken, R.G. Flood, and E. Robson (eds.), *The History of Mathematical Tables from Sumer to Spreadsheets*. Oxford: Oxford University Press, 2003, 18–47.

[^6]: <https://site.xavier.edu/polt/typewriters/varityper.html>

[^7]: Manual of Tabular Presentation: An Outline of Theory and Practice in the Presentation of Statistical Data in Tables for Publication. United States. Bureau of the Census. U.S. Government Printing Office, 1949. Resource available at: <https://www2.census.gov/library/publications/1949/general/tabular-presentation.pdf>.
